# -*- coding: utf-8 -*-
"""Cargo Classification and Notification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vUCaj2UTtpVP1EIKSQERiBVzWgn7MqxS

### Data Preprocessing and Deep Learning Model Development
"""

# !unzip -q "/content/drive/MyDrive/Data Science/train.zip" -d "/content/drive/MyDrive/Data Science/Cargo Classification"

from google.colab import drive
drive.mount('/content/drive')

!pip install openai nltk transformers langchain langchain_community tensorflow

import pandas as pd
import numpy as np
import os
import tensorflow as tf
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
from tensorflow.keras import layers, models

df = pd.read_csv('/content/drive/MyDrive/Data Science/Cargo Classification/train.csv')
df['filepath'] = df['image'].apply(lambda x: os.path.join('/content/drive/MyDrive/Data Science/Cargo Classification/images', x))
df['label'] = pd.factorize(df['category'])[0]

# Test Image Excluded From Training
test_image_filename = '2823080.jpg'
df = df[df['image'] != test_image_filename]

train_df, val_df = train_test_split(df, test_size=0.2, random_state=42, stratify=df['label'])

def create_dataset(df, batch_size=32, img_height=64, img_width=64):
    def load_image_and_label(filepath, label):
        image = tf.io.read_file(filepath)
        image = tf.image.decode_jpeg(image, channels=3)
        image = tf.image.resize(image, [img_height, img_width])
        image = image / 255.0
        return image, label

    dataset = tf.data.Dataset.from_tensor_slices((df['filepath'].values, df['label'].values))
    dataset = dataset.map(lambda x, y: load_image_and_label(x, y))
    dataset = dataset.shuffle(buffer_size=1000)
    dataset = dataset.batch(batch_size)
    dataset = dataset.prefetch(buffer_size=tf.data.experimental.AUTOTUNE)
    return dataset

train_dataset = create_dataset(train_df)
val_dataset = create_dataset(val_df)

data_augmentation = tf.keras.Sequential([
    tf.keras.layers.RandomFlip('horizontal'),
    tf.keras.layers.RandomRotation(0.2),
])

num_classes = len(train_df['label'].unique())

model = models.Sequential([
    tf.keras.Input(shape=(64, 64, 3)),
    data_augmentation,
    layers.Conv2D(32, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(128, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Flatten(),
    layers.Dense(128, activation='relu'),
    layers.Dropout(0.5),
    layers.Dense(num_classes, activation='softmax')
])

model.compile(optimizer=tf.keras.optimizers.Adam(),
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

history = model.fit(
    train_dataset,
    epochs=1,
    validation_data=val_dataset
)

def plot_results(val_dataset, model):
    for images, labels in val_dataset.take(1):
        predictions = model(images, training=False)
        predicted_labels = np.argmax(predictions, axis=1)
        actual_labels = np.array(labels)

        class_names = list(df['category'].unique())

        plt.figure(figsize=(15, 10))
        for i in range(min(10, len(images))):
            plt.subplot(2, 5, i + 1)
            plt.imshow(images[i])
            plt.axis('off')

            predicted_label = class_names[predicted_labels[i]]
            actual_label = class_names[actual_labels[i]]

            color = 'green' if predicted_labels[i] == actual_labels[i] else 'red'

            plt.title(f'Predicted: {predicted_label}\nActual: {actual_label}', color=color)

        plt.tight_layout()
        plt.show()

plot_results(val_dataset, model)

# model.save('/content/drive/MyDrive/Data Science/Cargo Classification/Cargo_Classification_Model.keras')

"""###**Cargo Navigation [Computer Vision] & Notification System [Natural Language Processing-LLM]**"""

import pandas as pd
import numpy as np
import tensorflow as tf
from tensorflow.keras.preprocessing import image as keras_image
from sklearn.preprocessing import LabelEncoder
from nltk.tokenize import word_tokenize
from langchain.prompts import PromptTemplate
import re
import os
import matplotlib.pyplot as plt
from IPython.display import display, HTML
import warnings
import nltk

warnings.filterwarnings("ignore")

nltk_data_path = nltk.data.find('tokenizers/punkt')
if not os.path.isfile(nltk_data_path):
    nltk.download('punkt')

model = tf.keras.models.load_model('/content/drive/MyDrive/Data Science/Cargo Classification/Cargo_Classification_Model.keras')

df = pd.read_csv('/content/drive/MyDrive/Data Science/Cargo Classification/train.csv')

label_encoder = LabelEncoder()
label_encoder.fit(df['category'])

message = "This is Ship ID: 2823080, Cargo Type: 1. We need entry to the Singapore's Tuas Port"

def preprocess_image(filepath):
    img = keras_image.load_img(filepath, target_size=(64, 64))
    img_array = keras_image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    img_array = img_array / 255.0
    return img_array

def extract_info_from_message(message):
    tokens = word_tokenize(message)
    message_str = ' '.join(tokens)

    ship_id_match = re.search(r'Ship ID\s*:\s*(\d+)', message_str)
    cargo_type_match = re.search(r'Cargo Type\s*:\s*(\d+)', message_str)

    ship_id = ship_id_match.group(1).strip() if ship_id_match else None
    cargo_type = cargo_type_match.group(1).strip() if cargo_type_match else None

    if not ship_id or not cargo_type:
        raise ValueError(f"Ship ID or Cargo Type not found in message. Extracted Ship ID: {ship_id}, Cargo Type: {cargo_type}")

    return ship_id, cargo_type

def get_predicted_cargo_type(image_path):
    img_array = preprocess_image(image_path)
    prediction = model.predict(img_array)
    predicted_class = np.argmax(prediction, axis=1)[0]
    cargo_type = label_encoder.inverse_transform([predicted_class])[0]
    return cargo_type, prediction

def generate_prompt(ship_id, cargo_type):
    prompt_template = PromptTemplate(
        input_variables=["ship_id", "cargo_type"],
        template="The Ship ID is {ship_id} and the Cargo Type is {cargo_type}. Requesting for Singapore's Tuas Port Entry"
    )
    prompt = prompt_template.format(ship_id=ship_id, cargo_type=cargo_type)
    return prompt

def get_llm_response(prompt):
    print(f"\nPrompt for LLM:\n{prompt}\n")
    return "Access Granted"

def main():
    ship_id, cargo_type = extract_info_from_message(message)

    image_filename = f"{ship_id}.jpg"
    image_path = os.path.join('/content/drive/MyDrive/Data Science/Cargo Classification/images', image_filename)

    if not os.path.isfile(image_path):
        raise ValueError(f"Image file not found: {image_path}")

    predicted_cargo_type, prediction = get_predicted_cargo_type(image_path)

    display(HTML(f"""
    <div style="font-size: 18px; color: #333333; margin-bottom: 20px; background-color: #f8f9fa; padding: 15px; border-radius: 5px;">
        <h2 style="color: #007bff;">Ship Message</h2>
        <p><strong>Received Message:</strong> <span style="color: #007bff;">{message}</span></p>
    </div>
    """))

    display(HTML(f"""
    <div style="font-size: 18px; color: #333333; margin-bottom: 20px; background-color: #f8f9fa; padding: 15px; border-radius: 5px;">
        <h2 style="color: #007bff;">Cargo Type Extraction and Prediction</h2>
        <h3 style="color: #28a745;">Ship ID: 2823080 Found in Database</h3>
        <p><strong>Extracted Cargo Type from Message:</strong> <span style="color: #28a745;">{cargo_type}</span></p>
        <p><strong>Predicted Cargo Type:</strong> <span style="color: #28a745;">{predicted_cargo_type}</span></p>
    </div>
    """))

    img = keras_image.load_img(image_path)
    plt.figure(figsize=(8, 6))
    plt.imshow(img)
    plt.title(f"Image: {image_filename}", fontsize=16, color='#007bff')
    plt.axis('off')
    plt.show()

    prompt = generate_prompt(ship_id, cargo_type)
    response = "Access Granted" if str(cargo_type) == str(predicted_cargo_type) else "Access Denied"

    display(HTML(f"""
    <div style="font-size: 18px; color: #333333; margin-bottom: 20px; background-color: #f8f9fa; padding: 15px; border-radius: 5px;">
        <h2 style="color: #007bff;">LLM Response</h2>
        <p><strong>Cargo Type from Message:</strong> <span style="color: #28a745;">{cargo_type}</span></p>
        <p><strong>Predicted Cargo Type:</strong> <span style="color: #28a745;">{predicted_cargo_type}</span></p>
        <p><strong>LLM Response:</strong> <span style="color: {'#28a745' if response == 'Access Granted' else '#dc3545'};">{response}</span></p>
    </div>
    """))

main()